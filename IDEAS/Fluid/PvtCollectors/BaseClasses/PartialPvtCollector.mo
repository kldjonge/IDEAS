within IDEAS.Fluid.PVTCollectors.BaseClasses;
model PartialPVTCollector
  "Extended partial solar (thermal) collector with discretized PV electrical calculations"
  extends IDEAS.Fluid.SolarCollectors.BaseClasses.PartialSolarCollector(
      redeclare IDEAS.Fluid.PVTCollectors.Data.GenericQuasiDynamic per);

  // =====  Parameters =====
  parameter Modelica.Units.SI.Irradiance HGloHorNom = 1000
    "Global irradiance at nominal conditions [W/m2]";
  parameter Modelica.Units.SI.Efficiency pLossFactor = 0.10
    "Loss factor of the PV panel(s)" annotation(Dialog(group="Electrical parameters"));
  constant Modelica.Units.SI.Temperature TpvtRef = 25 + 273.15
    "Reference cell temperature [K]";
  parameter IDEAS.Fluid.PVTCollectors.Types.CollectorType collectorType=IDEAS.Fluid.PVTCollectors.Types.CollectorType.Uncovered
    "Type of collector (used to select (tau*alpha)_eff)";
  parameter Modelica.Units.SI.DimensionlessRatio tauAlphaEff =
    (if collectorType ==IDEAS.Fluid.PVTCollectors.Types.CollectorType.Uncovered  then 0.901 else 0.84)
    "Effective transmittanceâ€“absorptance product";
  final parameter Modelica.Units.SI.CoefficientOfHeatTransfer UAbsFluidCalc =
  ((tauAlphaEff - per.etaEl) * (per.c1 + abs(per.gamma)*HGloHorNom))
  / ((tauAlphaEff - per.etaEl) - per.eta0)
  "Heat transfer coefficient between the fluid and the PV cells, calculated from datasheet parameters";

  // ===== Variables  =====

  Real Tm[nSeg]         "Mean fluid temperature for each segment";
  Real temCell[nSeg]     "Cell temperature for each segment [K]";
  Real temDiff[nSeg]     "Temperature difference of the cell relative to reference [K]";
  Real qth[nSeg]        "Thermal power density per segment [W/m2]";
  Real temMod     "Average cell temperature";
  Real temMea     "Average fluid temperature";
  Real solarPowerInternal[nSeg]   "Electrical power produced by each discretized PV segment [W]";
  Real HGloTil "Global irradiation on tilted surface [W/m2]";

  // ===== Real Output Connectors =====
  Modelica.Blocks.Interfaces.RealOutput pEl
    "Electrical power generated by the photovoltaic installation [W/m2]"
    annotation(Placement(transformation(extent={{100,70},{120,90}}),
        iconTransformation(extent={{100,70},{120,90}})));
  Modelica.Blocks.Interfaces.RealOutput qTh
    "Total thermal power generated by the PVT installation [W/m2]"
    annotation(Placement(transformation(extent={{100,-90},{120,-70}})));

equation
  // Directly calculate global irradiance from measurement data
  HGloTil = HDifTilIso.H + HDirTil.H;

  // Calculate PV electrical performance for each segment
  for i in 1:nSeg loop
    // Retrieve the mean fluid temperature from the sensor array (provided by the base model)
    Tm[i] = temSen[i].T;
    // Compute the local thermal power density [W/m2]
    qth[i] = (QGai[i].Q_flow + QLos[i].Q_flow) / (ATot_internal/nSeg);
    // Estimate the cell temperature using fluid temperature and thermal flux
    temCell[i] = Tm[i] + qth[i] / UAbsFluidCalc;
    // Determine the temperature difference relative to the reference temperature
    temDiff[i] = temCell[i] - TpvtRef;
    // Calculate electrical power output per segment using the PV performance equation
    solarPowerInternal[i] = (ATot_internal/nSeg) * (per.P_nominal/per.A) * (HGloTil/HGloHorNom) *
                         (1 + per.gamma*temDiff[i]) * (1 - pLossFactor);

  end for;

  // Assign the sum of the segment electrical outputs to the output connector pel
  pEl = sum(solarPowerInternal);

  // Calculate the total thermal power by multiplying the thermal density with the segment area and summing up
  qTh = (ATot_internal/nSeg) * sum(qth);

  // Calculate the average cell temperature, defined as module temperature
  temMod = sum(temCell)/nSeg;

  // Calculate the average fluid temperature, defined as module temperature
  temMea = sum(Tm)/nSeg;

 annotation (
  defaultComponentName="pvtCol",
  Documentation(info="<html>
<p>
This component is a partial model of a photovoltaic-thermal (PVT) collector.
It extends the base solar thermal collector model 
(<a href=\"modelica://IDEAS.Fluid.SolarCollectors.BaseClasses.PartialSolarCollector\">IDEAS.Fluid.
SolarCollectors.BaseClasses.PartialSolarCollector</a>) and adds a discretized
electrical submodel to compute the PV power output per segment.
</p>

<p>
The electrical performance is based on the PVWatts v5 approach (Dobos, 2014),
using datasheet parameters and an overall system loss factor <code>pLossFactor</code>.
This factor accounts for typical losses such as soiling, shading, wiring, and mismatch.
</p>

<p>
The model calculates the cell temperature for each segment based on the fluid temperature 
and an internal heat transfer coefficient, which is derived from parameters provided in the datasheet. 
This temperature is then used to compute the electrical power output. The total 
electrical and thermal outputs are subsequently aggregated.
</p>

<h4>References</h4>
<p>
Dobos, A. P. (2014). PVWatts Version 5 Manual. National Renewable Energy Laboratory (NREL).<br/>
Meertens et al. (2025). Experimental validation of PVT collector performance under dynamic conditions.
</p>
</html>",
revisions="<html>
<ul>
  <li>
  July 2, 2025, by Lone Meertens:<br/>
  First implementation of partial PVT collector model with discretized PV calculations.<br/>
  This is for
  <a href=\"https://github.com/open-ideas/IDEAS/issues/1436\">IDEAS, #1436</a>.
  </li>
</ul>
</html>"));


end PartialPVTCollector;
